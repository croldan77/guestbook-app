apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "guestbook-app.fullname" . }}
  labels:
    {{- include "guestbook-app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "guestbook-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "guestbook-app.selectorLabels" . | nindent 8 }}
    spec:
{{- if .Values.initContainers.enabled }}
      initContainers:
      - name: wait-for-mysql
        image: {{ .Values.initContainers.mysql.image }}
        command:
        - 'sh'
        - '-c'
        - |
          echo "Esperando a que MySQL esté completamente listo..."
          until mysql -h {{ .Release.Name }}-mysql -u {{ .Values.mysql.auth.username }} -p{{ .Values.mysql.auth.password }} -e "SELECT 1;" {{ .Values.mysql.auth.database }}; do
            echo "MySQL no está listo aún. Reintentando en {{ .Values.initContainers.mysql.checkInterval }} segundos..."
            sleep {{ .Values.initContainers.mysql.checkInterval }};
          done
          echo "✅ MySQL está completamente inicializado y aceptando conexiones" 
{{- end }}      
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 5000
          env:
            - name: MYSQL_HOST
              value: "{{ .Release.Name }}-mysql"
            - name: MYSQL_DATABASE
              value: {{ .Values.mysql.auth.database | quote }}
            - name: MYSQL_USER
              value: {{ .Values.mysql.auth.username | quote }}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-mysql
                  key: mysql-password
          {{- if .Values.probes.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: {{ .Values.probes.readiness.port }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.probes.liveness.port }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}